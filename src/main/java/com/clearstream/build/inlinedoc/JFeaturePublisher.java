package com.clearstream.build.inlinedoc;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.Map.Entry;

import com.clearstream.build.inlinedoc.IDocumentModel.DocumentEntry;

public class JFeaturePublisher implements IPublisher {

	/**
	 * Tags which this parser supports.
	 * @parameter
	 */
	String[] tags = new String[] {"@(CATEGORY)\\s+(.+?)$",
			"@(TARGETRELEASE)\\s+(.+?)$", 
			"@(PRIORITY)\\s+(.+?)$", 
			"@(NOTES)\\s+(.+?)$", 
			"@(MUST_HAVE)\\s+(.+?)$", 
			"@(ID)\\s+(.+?)$", 
			"@(REQ_CATEGORY)\\s+(.+?)$", 
			"@(REQ_SUBCATEGORY)\\s+(.+?)$", 
			"@(NOTES)\\s+(.+?)$"}; 

	@Override
	public void publish(IDocumentModel model) { 
		
		try{
			// Create file 
			FileWriter fstream = new FileWriter("userstories.jrq");
			BufferedWriter out = new BufferedWriter(fstream);
			
			out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			out.write("<!-- This content is generated by JFeature. DO NOT EDIT. -->");
			out.write("<requirements>");
			out.write("<info>");
			out.write("<external-file-info>");
			out.write("</external-file-info>");
			out.write("</info>");

			long counter = 1;
			Iterator<Entry<String, DocumentEntry>> it = model.getAllEntries("Userstory").entrySet().iterator();
			while (it.hasNext() == true) {
				Entry<String, DocumentEntry> pair = it.next();
				out.write("<requirement>");
				out.write("<id><![CDATA[" + counter + "]]></id>");
				out.write("<category><![CDATA[]]></category>");
				out.write("<sub-category><![CDATA[]]></sub-category>");
				out.write("<title><![CDATA[" + pair.getKey() + "]]></title>");
				out.write("<target-release><![CDATA[]]></target-release>");
				out.write("<priority><![CDATA[3]]></priority>");
				out.write("<must-have><![CDATA[No]]></must-have>");
				out.write("<description><![CDATA[]]></description>");
				out.write("<notes><![CDATA[]]></notes>");
				
				/** Use reflection to detect the methods. */
				String methods = "";
				String separator = "";
				Class c1 = Class.forName(pair.getValue().packageName + "." + pair.getValue().file);
				for (Method method : c1.getDeclaredMethods()) {
					methods += method.getName() + separator;
					separator = ",";
				} 
				out.write("<test-case-methods><![CDATA[" + methods + "]]></test-case-methods>");				
				out.write("<dependencies><![CDATA[]]></dependencies>");
				out.write("</requirement>");				
			}

			out.write("</requirements>");			
			out.close();
		}catch (Exception e){//Catch exception if any
			System.err.println("Error: " + e.getMessage());
		}
	}


	@Override
	public String[] getTags() {
		return tags;
	}
}
